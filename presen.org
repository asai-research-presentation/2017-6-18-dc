#+title: Exploiting Search Space Structure in Classical Planning: Analyses and Algorithms (DC talk)
#+author: Masataro Asai
#+include: "head.org"
#+LINK: img file:img/%s
#+LINK: png file:img/%s.png
#+LINK: jpg file:img/%s.jpg
#+LINK: gif file:img/%s.gif
#+LINK: spng file:img/static/%s.png
#+LINK: sjpg file:img/static/%s.jpg
#+LINK: sgif file:img/static/%s.gif

#+begin_outline-text-1
#+begin_center
Masataro Asai

Final year in Ph.D program (1 years to go)

University of Tokyo
#+end_center

#+begin_note
#+begin_alignright
Made by guicho2.71828 (Masataro Asai)
#+end_alignright
#+end_note
#+end_outline-text-1

* Motivation

+ 
  #+begin_larger
  There are so many algorithms (A*, GBFS, LS, MRW, MCTS, RRT... let alone LAMA, probe, etc...)
  #+end_larger
  + Painful to see (although they are useful): stack exhaust
  + Theoretical but qualitative understandings only
  + Lacks the /single/ continuum (which is better for me)
+ 
  #+begin_larger
  I do not want to see "new" search algorithms anymore
  #+end_larger

* Overview

+ 
  #+begin_larger
  Unified Search Theory^{TM} --- and I have a plan.
  #+end_larger
  + Reduce optimal search into satisficing search (AAAI16, JAIR17)
  + Reduce satisficing search into blind search (ICAPS17)
  + Reduce blind search into ... ? (ICAPS17, [Cohen and Beck, AAAI17])
+ I may retract the proposal if I do not have enough time.
  + (I can just stick bunch of papers together)

* The beginning: A* tiebreaking (AAAI2016)

Tiebreaking in A* by balancing the search depth in each plateau → improved performance

#+begin_container-fluid
#+begin_row-fluid
#+begin_span6
+ [[png:aaai16-3]]
#+end_span6
#+begin_span6
#+begin_smaller
| /                       | <            | >           | <>                |
|                         | <c>          | <c>         | <c>               |
|                         | ［h, FIFO］  | ［h, LIFO］ | ［h, RD, RO］     |
| Domain Set              | (FD Default) |             | (Proposed)        |
|-------------------------+--------------+-------------+-------------------|
| LMcut                   |              |             |                   |
| IPC Instances (1104)    | 558          | 565         | *572.8* (↑ 14.8) |
| Zerocost Instances(680) | 256          | 279         | *294.2* (↑ 38.2) |
| Sum(1724)               | 814          | 844         | *867.0* (↑ 53.0) |
|-------------------------+--------------+-------------+-------------------|
| M&S                     |              |             |                   |
| IPC Instances (1104)    | 479          | *488*       | 484.0 (↑ 5.0)    |
| Zerocost Instances(680) | 276          | 290         | *310.2* (↑ 34.2) |
| Sum(1724)               | 755          | 778         | *794.2* (↑ 39.2) |
|-------------------------+--------------+-------------+-------------------|
#+end_smaller
#+end_span6
#+end_row-fluid
#+end_container-fluid

** The beginning: A* tiebreaking (AAAI2016)

Standard A* priority queue:

+ First sort by $f=g+h$
+ Next sort by $h$
+ Implicitly sort by FIFO or LIFO or Random (/default tiebreaking/)

Random Depth Tiebreaking:

+ First sort by $f=g+h$
+ Next sort by $h$
+ Randomly select the /depth bucket/ : depth = steps from the nearest 
+ Implicitly sort by FIFO or LIFO (/default tiebreaking/)

* Turned out: A case similar to Type-based search for GBFS



* The beginning: A* tiebreaking

* Macro operators changes the search space structure

[[png:macro/search0]]

* Macro operators changes the search space structure

[[png:macro/search1]]

* Macro operators changes the search space structure :noexport:

[[png:macro/search.2]]

* Proposal: Unifying Framework for Analyzing Search Space

[[png:triangle]]

* Proposal: Unifying Framework for Analyzing Search Space

[[png:triangle0]]

* Proposal: Unifying Framework for Analyzing Search Space

[[png:triangle1]]

* 

#+begin_xlarge
#+begin_center
Percolation Theory
#+end_center
#+end_xlarge

** Percolation Theory                                              :noexport:

 [[png:percolate/circuit]]

** Example: Percolation in 2-dimentional grids

 A node is either *occupied* or *unoccupied*

 [[png:percolate/percolated0]]

 #+begin_alignright
 #+begin_larger
 + Key interst: *when/how* a graph percolates?
 #+end_larger
 #+end_alignright

** Bond (edge) / Site (node) percolation

[[sgif:site-bond]]

** Percolation described by occupation ratio /r/

 [[png:percolate/cluster0]]

** Percolation described by occupation ratio /r/

 [[png:percolate/cluster1]]

** Percolation described by occupation ratio /r/

[[png:percolate/cluster2]]

** Percolation described by occupation ratio /r/

Generates a connected cluster with complex shape

[[png:percolate/cluster3]]

** Phase Transition

[[png:percolate/cluster4]]

** Macros may be shifting the ratio to the right

 [[png:percolate/cluster5]]

** Forward Search : Increasing /r/ as the search progresses

 [[png:percolate/cluster6]]

** Open Questions

 + *Prove the connection between macro-operators and critical value*
   + I am testing if randomly generated *Junk Macros* improve the performance
     + *Ongoing work --- /positive results/ (next slide)*
 + *How /existing macro-approaches/ change the connectivity?*
   + MacroFF(Botea05), Marvin(Coles04,07) MUM(Chrpa14), CAP(Asai15), BLOMA(Siddiqui15)
 + *What is the /r_c/ of each domain?*
   + critical value of Logistics is X, Barman is Y ...
 + *At which /r/ does each search algorithm find a solution?*
   + Lookahead search, GBFS, Type-GBFS, A*, Random Walk...

*** Preliminary results on Junk Macros

 [[png:percolate/junk]]

 #+begin_alignright
 Promising direction!
 #+end_alignright

* Unifying Framework for Analyzing Search Space

[[png:triangle2]]

* 

#+begin_xlarge
#+begin_center
Fractals
#+end_center
#+end_xlarge

#+begin_alignright
No time, only described briefly
#+end_alignright

** Fractals 

Sierpinsky's Gasket, Tree (L-system), Koch Curve


#+begin_container-fluid
#+begin_row-fluid
#+begin_span6
[[sgif:sierpinski]]
#+end_span6
#+begin_span6
[[sgif:koch]]
#+end_span6
#+end_row-fluid
#+end_container-fluid


** Fractal Dimension: How many nodes are included when the */scale/* changes?

Takes Fractional value; != Space Dimension

[[png:fractals/dimention]]

** Fractals are defined by generative rules: example

 [[png:fractals/ba]]

** Fractals are defined by generative rules: example

 [[png:fractals/dla]]

** Fractals are defined by generative rules: example

 [[png:fractals/eden]]

** */Search space/* is also defined by expansion rules

 [[png:fractals/eden-2]]

** Connections between Fractals and Search Algorithms

[[png:fractals/fractal]]

** Connections between Fractals and Search Algorithms

[[png:fractals/fractal2]]

** Connections between Fractals and Search Algorithms

[[png:fractals/fractal3]]

** Connections between Fractals and Percolation

 [[png:fractals/cluster]]

* Unifying Framework for Analyzing Search Space

[[png:triangle3]]

* Conclusion: Thesis Abstract

#+begin_larger
+ *Establish a framework* for analysing the search behavior based on percolation theory
+ *Propose paper 1,2,3*
+ *Analyze paper 1,2,3* using *percolation theory*
  + Macro operators in paper 1,2
  + Tiebreaking mechanism in paper 3
+ */Give an answer/ to why paper 1,2,3 perform good*
#+end_larger

#+begin_alignright
→ Unified, consistent thesis!
#+end_alignright

#+begin_larger
#+begin_center
Thank you for listening!
#+end_center
#+end_larger

*             not-used                                             :noexport:

** Meta-parameter which defines the shape: Fractal dimension

 a statistical index of complexity comparing how detail in a pattern changes with the scale at which it is measured

*** Computing the Fractal Dimension





*** Connections between Fractals and Search Algorithms

  [[png:fractals/fractal]]
** Possible Benefits:

 + More thoeries about macro operators. Only thing we know:
   + "*Increases branching factor*"
   + *!=* *effective* branching factor by heuristic search
 + Understand Search Algorithms by the *shape of the explored space*
   + What is the fundamental difference between 2 algorithms?
** Effective Search Space

 Search space evaluated by the search algorithm ⊆ (entire) search space

 [[png:fractals/ess]]

 Each search algorithm defines its */shape/*

** Inherent Danger of Showing Research Ideas at DC                 :noexport:
 
 I am inclined to continuing research after graduation as a PostDoc / maybe in industry, but showing too much
 unreliable ideas here may cause this:

 #+begin_alignright
 (just be sure, I'm *not* claiming I am Einstein, no!)
 #+end_alignright

 [[png:einstein]]

 # + Do you want to hire people with crazy ideas? or
 # + Do you want to hire people with safe ideas?
 # + Depending on the answers, I should not show some part of the slides in this talk
  
